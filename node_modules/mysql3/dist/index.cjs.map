{"version":3,"file":"index.cjs","sources":["../src/sql.ts","../src/util.ts","../src/PoolConnection.ts","../src/ConnectionPool.ts"],"sourcesContent":["type PrimitiveValue = string | number | Buffer | bigint | boolean | null | Date;\ntype SingleValue = PrimitiveValue | SqlFrag\ntype InsertValue = SingleValue | undefined\ntype Value = SingleValue | SingleValue[];\ntype OptionalValue = Value|undefined\n\ntype StrictDatabaseId = [database: string]\ntype LooseDatabaseId = StrictDatabaseId | string\n\ntype StrictTableId = [database: string, table: string] | [table: string]\ntype LooseTableId = StrictTableId | string\ntype TableId = LooseTableId | SqlFrag\n\ntype StrictColumnId = [column: string] | [table: string, column: string] | [database: string, table: string, column: string]\ntype LooseColumnId = StrictColumnId | string;\ntype ColumnId = LooseColumnId | SqlFrag\n\ntype LooseId = LooseColumnId;\ntype Id = LooseId | SqlFrag;\n\ntype LatLngPair = [lat: number, lng: number]\ntype PointArray = LatLngPair[] | Point[] | LatLngObj[]\n\ninterface Point {\n    x: number\n    y: number\n}\n\ninterface LatLngObj {\n    lat: number\n    lng: number\n}\n\nconst CHARS_REGEX = /[\\x00\\b\\n\\r\\t\\x1A'\\\\]/gu;\nconst CHARS_ESCAPE_MAP: Record<string,string> = {\n    '\\0': '\\\\0',\n    '\\b': '\\\\b',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',\n    '\\x1a': '\\\\Z',\n    '\\'': \"''\",\n    '\\\\': '\\\\\\\\'\n};\nconst ID_GLOBAL_REGEXP = /`/g;\nconst QUAL_GLOBAL_REGEXP = /\\./g;\n\nexport class SqlFrag {\n    constructor(private readonly sql: string) {\n    }\n\n    toString() {\n        throw new Error(\"SqlFrag cannot be cast to string\");\n    }\n\n    toSqlString() {\n        return this.sql;\n    }\n}\n\nexport function isFrag(x: any): x is SqlFrag {\n    return x instanceof SqlFrag;\n}\n\nfunction frag(sql: string): SqlFrag {\n    return new SqlFrag(sql)\n}\n\nexport function escapeValue(value: Value): SqlFrag {\n    if (isFrag(value)) return value;\n    return frag(_escapeValue(value));\n}\n\nexport function sql(strings: TemplateStringsArray, ...values: Value[]): SqlFrag {\n    let out = [];\n    let i = 0;\n    for (; i < values.length; ++i) {\n        out.push(strings[i], escapeValue(values[i]).toSqlString());\n    }\n    out.push(strings[i]);\n    return frag(out.join(''));\n}\n\nexport function _escapeValue(value: Value): string {\n    if (isFrag(value)) {\n        return value.toSqlString();\n    }\n    if(Array.isArray(value)) {\n        if(!value.length) return '/*emptyArr*/NULL'\n        return value.map(v => _escapeValue(v)).join(',');\n    }\n    if(Buffer.isBuffer(value)) {\n        return `x'${value.toString('hex')}'`;\n    }\n    if(typeof value === 'number' || typeof value === 'bigint') {\n        return String(value);\n    }\n    if(typeof value === 'string') {\n        return _escapeString(value);\n    }\n    if(value === true) {\n        return '1';\n    }\n    if(value === false) {\n        return '0';\n    }\n    if(value === null) {\n        return 'NULL';\n    }\n    if(value instanceof Date) {\n        return `TIMESTAMP'${value.toISOString().replace('T', ' ').replace(/(?:\\.000)?Z$/, '')}'`\n    }\n    throw new Error(`Unsupported value type: ${value}`)\n}\n\nfunction hasOwn(obj: object, key: PropertyKey) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n\nfunction _escapeString(value: string): string {\n    return \"'\" + String(value).replace(CHARS_REGEX,m => CHARS_ESCAPE_MAP[m]) + \"'\";\n}\n\nfunction escapeIdStrictFrag(id: Id): SqlFrag {\n    if (isFrag(id)) return id;\n    if (Array.isArray(id)) return frag(id.map(_escapeIdStrict).join('.'));\n    return frag(_escapeIdStrict(id));\n}\n\n\nexport function _escapeIdLoose(id: Id): string {\n    if(isFrag(id)) return id.toSqlString();\n    if(Array.isArray(id)) return id.map(_escapeIdStrict).join('.');\n    return '`' + String(id).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n}\n\nexport function _escapeIdStrict(id: Id): string {\n    if(isFrag(id)) return id.toSqlString();\n    if(Array.isArray(id)) return id.map(_escapeIdStrict).join('.');\n    return '`' + String(id).replace(ID_GLOBAL_REGEXP, '``') + '`';\n}\n\nfunction pointPairs(points: PointArray): LatLngPair[] {\n    if (!points.length) return [];\n    const sample = points[0];\n    if (Array.isArray(sample) && sample.length === 2) {\n        return [...points] as LatLngPair[];\n    }\n    if (hasOwn(sample, 'x') && hasOwn(sample, 'y')) {\n        return (points as Point[]).map(pt => [pt.x, pt.y]);\n    }\n    if (hasOwn(sample, 'lat') && hasOwn(sample, 'lng')) {\n        return (points as LatLngObj[]).map(pt => [pt.lat, pt.lng]);\n    }\n    throw new Error(\"Points are not in an expected format\")\n}\n\nexport interface InsertOptions {\n    /**\n     * What to do if a duplicate key is found.\n     */\n    onDuplicateKey?: DuplicateKey\n    /**\n     * Ignore all errors.\n     */\n    ignore?: boolean\n}\n\nconst EMPTY_OBJECT: Record<string,any> = Object.freeze({__proto__:null})\n\nexport enum DuplicateKey {\n    /** Don't insert duplicate records. */\n    IGNORE = 'ignore',\n    /** Update record with new values. */\n    UPDATE = 'update',\n}\n\n// https://stackoverflow.com/questions/65976300/how-to-properly-extend-a-record\ntype Columns<T> = keyof T & string\ntype TableSchema<T> = Record<Columns<T>, Value>\ntype InsertTableSchema<T> = Record<Columns<T>, InsertValue>\n// type TableSchema<T> = {[P in keyof T]?: Value}\ntype AnySchema = Record<string, Value>\ntype ColumnValueTuple<T> = [column: Columns<T>|ColumnId, value: Value]\ntype InsertColumnValueTuple<T> = [column: Columns<T>|ColumnId, value: InsertValue]\ntype InsertData<T extends InsertTableSchema<T>> =  T|InsertColumnValueTuple<T>[]\n\n\nfunction getFields<T extends Record<string,any>>(o: T) {\n    return Object.keys(o).filter(k => o[k] !== undefined) as Array<keyof T & string>\n}\n\n\n// interface ObjectConstructor {\n//     keys<T extends object>(o: T): Array<keyof T & string>\n// }\n\n// const TRUE_SQL = sql`1`\n// const FALSE_SQL = sql`0`\n\nexport namespace sql {\n    export function set<T extends InsertTableSchema<T>>(fields: InsertData<T>): SqlFrag {\n        if(Array.isArray(fields)) {\n            const filteredFields = fields.filter(p => p[1] !== undefined)\n            if(!filteredFields.length) throw new Error(\"No fields defined\")\n            return frag(\n                filteredFields\n                    .map(f => `${_escapeIdStrict(f[0])}=${_escapeValue(f[1] as Value)}`)\n                    .join(', ')\n            );\n        }\n        const filteredFields = getFields(fields)\n        if(!filteredFields.length) throw new Error(\"No fields defined\")\n        return frag(\n            filteredFields\n                .map(fieldName => `${_escapeIdLoose(fieldName)}=${_escapeValue((fields as AnySchema)[fieldName])}`)\n                .join(', ')\n        );\n    }\n    export function insert<T extends InsertTableSchema<T>>(table: TableId, data: InsertData<T>, options: InsertOptions=EMPTY_OBJECT): SqlFrag {\n        let q = sql`INSERT ${frag(options.ignore ? 'IGNORE ' : '')}INTO ${escapeIdStrictFrag(table)} SET ${sql.set(data)}`;\n\n        if (options.onDuplicateKey === DuplicateKey.IGNORE) {\n            let firstCol: Id;\n            if (Array.isArray(data)) {\n                firstCol = data[0][0]\n            } else {\n                firstCol = Object.keys(data)[0];\n            }\n            const escCol = frag(_escapeIdLoose(firstCol));\n            q = sql`${q} ON DUPLICATE KEY UPDATE ${escCol}=${escCol}`;\n        } else if(options.onDuplicateKey === DuplicateKey.UPDATE) {\n            let cols: Id[];\n            if(Array.isArray(data)) {\n                cols = data.map(f => f[0] as ColumnId);\n            } else {\n                cols = getFields(data);\n            }\n            q = sql`${q} ON DUPLICATE KEY UPDATE ${cols.map(col =>{\n                const escCol = frag(_escapeIdLoose(col));\n                return sql`${escCol}=VALUES(${escCol})`\n            })}`;\n        }\n        return q;\n    }\n    // TODO: bulkInsert\n    // TODO: update?\n\n    export function alias(fields: Record<string, ColumnId>|Array<[column:ColumnId,alias:string]>): SqlFrag {\n        if(Array.isArray(fields)) {\n            return frag(fields.map(f => `${_escapeIdStrict(f[0])} AS ${_escapeIdStrict(f[1])}`).join(', '));\n        }\n        return frag(getFields(fields).map(alias => `${_escapeIdStrict(fields[alias])} AS ${_escapeIdStrict(alias)}`).join(', '));\n    }\n    export function raw(sqlString: string | SqlFrag): SqlFrag {\n        if (isFrag(sqlString)) return sqlString;\n        return frag(sqlString);\n    }\n    // export function timestamp(value: moment.MomentInput, outputTimezone?: string | null, inputTimezone?: string | null, fsp?: number | null): SqlFrag {\n    //     // https://dev.mysql.com/doc/refman/5.7/en/date-and-time-literals.html\n    //     // https://momentjs.com/docs/#/displaying/format/\n    //     const date = makeMoment(value, outputTimezone, inputTimezone);\n    //     let frac = '';\n    //     if (fsp != null) {\n    //         if (fsp < 0 || fsp > 6) {\n    //             // https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-overview.html\n    //             throw new Error(`fsp out of range: ${fsp}`);\n    //         } else if (fsp > 0) {\n    //             frac = '.' + 'S'.repeat(fsp);\n    //         }\n    //     } else if (date.milliseconds() !== 0) {\n    //         frac = '.SSS';\n    //     }\n    //\n    //     return raw(`TIMESTAMP'${date.format(`YYYY-MM-DD HH:mm:ss${frac}`)}'`)\n    // }\n    export function point(x: number, y: number): SqlFrag  {\n        return sql`PointFromText(${`POINT(${x} ${y})`})`;\n    }\n    // export function polygon(points: PointArray, autoComplete = true): SqlFrag  {\n    //     // https://dev.mysql.com/doc/refman/5.7/en/gis-data-formats.html\n    //     // https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\n    //     if (!points.length) throw new Error(\"Cannot create an empty polygon\");\n    //     points = pointPairs(points);\n    //     if (autoComplete) {\n    //         const l = points.length - 1;\n    //         if (!(points[0][0] === points[l][0] && points[0][1] === points[l][1])) {\n    //             points.push([points[0][0], points[0][1]]);\n    //         }\n    //     }\n    //     return sql`PolyFromText(${`POLYGON((${\n    //         points.map(([x, y]) => `${x} ${y}`).join(',')\n    //     }))`})`;\n    // }\n    export function id(id: Id): SqlFrag {\n        return escapeIdStrictFrag(id)\n    }\n    /** @deprecated */\n    export function db(id: LooseDatabaseId): SqlFrag {\n        return escapeIdStrictFrag(id)\n    }\n    /** @deprecated */\n    export function tbl(id: LooseTableId): SqlFrag {\n        return escapeIdStrictFrag(id)\n    }\n    /** @deprecated */\n    export function col(id: LooseColumnId): SqlFrag {\n        return escapeIdStrictFrag(id)\n    }\n    export function cols(...columns: Array<ColumnId>): SqlFrag {\n        // TODO: make this even stricter? use max array len of 3\n        return frag(columns.map(_escapeIdStrict).join(', '))\n    }\n    /** @deprecated */\n    export function columns(columns: Array<ColumnId>): SqlFrag {\n        return frag(columns.map(_escapeIdStrict).join(', '))\n    }\n    export function values(values: Value[][]): SqlFrag {\n        return frag(values.map(row => `(${row.map(_escapeValue).join(',')})`).join(',\\n'))\n    }\n}\n","import type mariadb from 'mariadb'\nimport {SqlFrag} from './sql'\nimport type * as geojson from 'geojson'\n\nexport function zip<A, B>(a: A[], b: B[]): Array<[A, B]> {\n    if(a.length !== b.length) throw new Error(\"Cannot zip arrays; lengths differ\")\n    return a.map((x, i) => [x, b[i]])\n}\n\nexport interface QueryOptions extends mariadb.QueryConfig {\n    sql: SqlFrag\n}\n\nexport type QueryParam = SqlFrag | QueryOptions\n\nexport function makeOptions(query: QueryParam) {\n    if(query instanceof SqlFrag) {\n        return {sql: query}\n    } else if(typeof query === 'object') {\n        return query\n    }\n    throw new Error(`Expected sql\\`template string\\` or {options}, got ${typeof query}`)\n}\n\nexport const META = 'meta'\nexport type DefaultValueType =\n    string\n    | number\n    | /*FIXME might be coming out wrong*/Buffer\n    | boolean\n    | Date\n    | bigint\n    | null\n    | /*set*/string[]\n    | geojson.Geometry\nexport type DefaultRecordType = Record<string, DefaultValueType>\nexport type QueryResult<T> = T[] & { [META]: mariadb.FieldInfo[] }\n","import type {DefaultValueType, QueryParam, QueryResult} from './util';\nimport { makeOptions} from './util'\nimport type mariadb from 'mariadb'\nimport type { SqlFrag} from './sql';\nimport {sql} from './sql'\n\nexport class PoolConnection<TDefaultValue = DefaultValueType> {\n\n    constructor(private readonly conn: mariadb.PoolConnection) {\n    }\n\n    query<TRecord = Record<string, TDefaultValue>>(query: QueryParam): Promise<QueryResult<TRecord>> {\n        const opts = makeOptions(query)\n        return this.conn.query({\n            ...opts,\n            sql: opts.sql.toSqlString(),\n        })\n    }\n\n    exec: ((...args: Parameters<typeof PoolConnection.prototype.query>) => Promise<mariadb.UpsertResult>) = this.query.bind(this) as any\n\n    async row<TRecord extends object = Record<string, TDefaultValue>>(query: QueryParam): Promise<TRecord | null> {\n        const opts = makeOptions(query)\n        const rows = await this.query<TRecord>({\n            ...opts,\n            sql: sql`select *\n                     from (${opts.sql}) _query\n                     limit 1`\n        })\n        return rows.length ? rows[0] : null\n    }\n\n    async col<TValue = TDefaultValue>(query: SqlFrag): Promise<TValue[]> {\n        const rows = await this.query<any[]>({\n            sql: query,\n            rowsAsArray: true,\n        })\n        if(!rows.length) return []\n        if(rows[0].length !== 1) throw new Error(`Expected exactly 1 field in query, got ${rows[0].length}`)\n        return rows.map(r => r[0])\n    }\n\n    async value<TValue = TDefaultValue>(query: SqlFrag): Promise<TValue | null> {\n        const row = await this.row<TValue[]>({\n            sql: query,\n            rowsAsArray: true,\n        })\n        if(!row) return null\n        if(row.length !== 1) throw new Error(`Expected exactly 1 field in query, got ${row.length}`)\n        return row[0]\n    }\n\n    async exists(query: SqlFrag): Promise<boolean> {\n        return Boolean(await this.value<0 | 1>(sql`select exists(${query})`))\n    }\n\n    async count(query: SqlFrag) {\n        return Number(await this.value(sql`select count(*) from (${query}) _query`))\n    }\n\n    async* stream<TRecord extends object = Record<string, TDefaultValue>>(query: SqlFrag): AsyncGenerator<TRecord, unknown, undefined> {\n        let results: TRecord[] = []\n        let resolve: () => void\n        let promise = new Promise<void>(r => resolve = r)\n        let done = false\n\n        this.conn.queryStream(query.toSqlString())\n            .on('error', err => {\n                throw err\n            })\n            .on('data', row => {\n                results.push(row)\n                resolve()\n            })\n            .on('end', () => {\n                done = true\n                resolve()\n            })\n\n        for(; ;) {\n            await promise\n            yield* results\n            if(done) break\n            promise = new Promise(r => resolve = r)\n            results = []\n        }\n        return\n    }\n\n    release() {\n        return this.conn.release()\n    }\n\n    beginTransaction() {\n        return this.conn.beginTransaction()\n    }\n\n    commit() {\n        return this.conn.commit()\n    }\n\n    rollback() {\n        return this.conn.rollback()\n    }\n\n    ping() {\n        return this.conn.ping()\n    }\n\n    changeUser() {\n        return this.conn.changeUser()\n    }\n\n    close() {\n        return this.conn.end()\n    }\n\n    destroy() {\n        return this.conn.destroy()\n    }\n\n    get serverVersion() {\n        return this.conn.serverVersion()\n    }\n\n    get isValid() {\n        return this.conn.isValid()\n    }\n}\n","import type {DefaultValueType, QueryResult} from './util';\nimport { zip} from './util'\nimport mariadb from 'mariadb'\nimport type {SqlFrag} from './sql'\nimport {PoolConnection} from './PoolConnection'\n\nexport class ConnectionPool<TDefaultValue = DefaultValueType> {\n\n    constructor(private readonly pool: mariadb.Pool) {\n    }\n\n    async getConnection() {\n        return new PoolConnection<TDefaultValue>(await this.pool.getConnection())\n    }\n\n    private _fwd<K extends keyof typeof PoolConnection.prototype>(method: K): typeof PoolConnection.prototype[K] {\n        return (async (...args: any[]) => {\n            const conn = await this.getConnection()\n            try {\n                return await (conn[method] as any)(...args)\n            } finally {\n                conn.release()  // TODO: what if release fails? should we at least log something?\n            }\n        }) as any\n    }\n\n    query = this._fwd('query')  // FIXME: type is not exporting correctly\n    exec = this._fwd('exec')\n    row = this._fwd('row')\n    col = this._fwd('col')\n    value = this._fwd('value')\n    exists = this._fwd('exists')\n    count = this._fwd('count')\n\n    async* stream<TRecord extends object = Record<string, TDefaultValue>>(query: SqlFrag): AsyncGenerator<TRecord, unknown, undefined> {\n        const conn = await this.getConnection()\n        try {\n            yield* conn.stream(query)\n        } finally {\n            conn.release()\n        }\n        return\n    }\n\n    // close = this.pool.end.bind(this.pool)\n    close() {\n        return this.pool.end()\n    }\n\n    async transaction<TReturn>(callback: (conn: PoolConnection<TDefaultValue>) => Promise<TReturn>): Promise<TReturn>;\n    async transaction<TUnionResults = Record<string, TDefaultValue>>(sqlFrags: SqlFrag[]): Promise<QueryResult<TUnionResults>[]>;\n    async transaction<TResult>(callback: any): Promise<any> {\n        if(Array.isArray(callback)) {\n            return this.transaction<any>(async conn => {\n                const results = await Promise.allSettled(callback.map(sql => conn.query(sql)))\n                if(results.some(r => r.status === 'rejected')) {\n                    const errors = zip(callback, results).map((x, i) => ({\n                        index: i,\n                        query: x[0],\n                        result: x[1],\n                    })).filter(r => r.result.status === 'rejected')\n                    throw Error(`${errors.length} quer${errors.length === 1 ? 'y' : 'ies'} failed:${errors.map(err => `\\n[${err.index}] ${err.query.toSqlString()} :: ${(err.result as any).reason}`).join('')}`)\n                }\n                return results.map(r => (r as any).value)\n            })\n        }\n\n        const conn = await this.getConnection()\n        try {\n            await conn.beginTransaction()\n            let result: TResult\n            try {\n                result = await callback(conn)\n            } catch(err) {\n                await conn.rollback()\n                throw err\n            }\n            await conn.commit()\n            return result\n        } finally {\n            await conn.release()\n        }\n    }\n\n\n    get activeConnections() {\n        return this.pool.activeConnections()\n    }\n\n    get totalConnections() {\n        return this.pool.totalConnections()\n    }\n\n    get idleConnections() {\n        return this.pool.idleConnections()\n    }\n\n    get taskQueueSize() {\n        return this.pool.taskQueueSize()\n    }\n}\n\nexport function createPool<T = DefaultValueType>(config: mariadb.PoolConfig) {\n    return new ConnectionPool<T>(mariadb.createPool({\n        // bigIntAsNumber: true,\n        dateStrings: true,\n        ...config,\n    }))\n}\n"],"names":["DuplicateKey"],"mappings":";;;;AAiCA,MAAM,WAAW,GAAG,yBAAyB;AAC7C,MAAM,gBAAgB,GAA0B;AAC5C,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,MAAM,EAAE,KAAK;AACb,IAAA,IAAI,EAAE,IAAI;AACV,IAAA,IAAI,EAAE;CACT;AACD,MAAM,gBAAgB,GAAG,IAAI;AAC7B,MAAM,kBAAkB,GAAG,KAAK;MAEnB,OAAO,CAAA;AACa,IAAA,GAAA;AAA7B,IAAA,WAAA,CAA6B,GAAW,EAAA;QAAX,IAAG,CAAA,GAAA,GAAH,GAAG;;IAGhC,QAAQ,GAAA;AACJ,QAAA,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;;IAGvD,WAAW,GAAA;QACP,OAAO,IAAI,CAAC,GAAG;;AAEtB;AAEK,SAAU,MAAM,CAAC,CAAM,EAAA;IACzB,OAAO,CAAC,YAAY,OAAO;AAC/B;AAEA,SAAS,IAAI,CAAC,GAAW,EAAA;AACrB,IAAA,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC;AAC3B;AAEM,SAAU,WAAW,CAAC,KAAY,EAAA;IACpC,IAAI,MAAM,CAAC,KAAK,CAAC;AAAE,QAAA,OAAO,KAAK;AAC/B,IAAA,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AACpC;SAEgB,GAAG,CAAC,OAA6B,EAAE,GAAG,MAAe,EAAA;IACjE,IAAI,GAAG,GAAG,EAAE;IACZ,IAAI,CAAC,GAAG,CAAC;IACT,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAC3B,QAAA,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;;IAE9D,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC7B;AAEM,SAAU,YAAY,CAAC,KAAY,EAAA;AACrC,IAAA,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;AACf,QAAA,OAAO,KAAK,CAAC,WAAW,EAAE;;AAE9B,IAAA,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACrB,IAAG,CAAC,KAAK,CAAC,MAAM;AAAE,YAAA,OAAO,kBAAkB;AAC3C,QAAA,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;AAEpD,IAAA,IAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACvB,OAAO,CAAA,EAAA,EAAK,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG;;IAExC,IAAG,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACvD,QAAA,OAAO,MAAM,CAAC,KAAK,CAAC;;AAExB,IAAA,IAAG,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC1B,QAAA,OAAO,aAAa,CAAC,KAAK,CAAC;;AAE/B,IAAA,IAAG,KAAK,KAAK,IAAI,EAAE;AACf,QAAA,OAAO,GAAG;;AAEd,IAAA,IAAG,KAAK,KAAK,KAAK,EAAE;AAChB,QAAA,OAAO,GAAG;;AAEd,IAAA,IAAG,KAAK,KAAK,IAAI,EAAE;AACf,QAAA,OAAO,MAAM;;AAEjB,IAAA,IAAG,KAAK,YAAY,IAAI,EAAE;QACtB,OAAO,CAAA,UAAA,EAAa,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,GAAG;;AAE5F,IAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,CAAA,CAAE,CAAC;AACvD;AAOA,SAAS,aAAa,CAAC,KAAa,EAAA;IAChC,OAAO,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,WAAW,EAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;AAClF;AAEA,SAAS,kBAAkB,CAAC,EAAM,EAAA;IAC9B,IAAI,MAAM,CAAC,EAAE,CAAC;AAAE,QAAA,OAAO,EAAE;AACzB,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;AAAE,QAAA,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrE,IAAA,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AACpC;AAGM,SAAU,cAAc,CAAC,EAAM,EAAA;IACjC,IAAG,MAAM,CAAC,EAAE,CAAC;AAAE,QAAA,OAAO,EAAE,CAAC,WAAW,EAAE;AACtC,IAAA,IAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;QAAE,OAAO,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IAC9D,OAAO,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,GAAG,GAAG;AACpG;AAEM,SAAU,eAAe,CAAC,EAAM,EAAA;IAClC,IAAG,MAAM,CAAC,EAAE,CAAC;AAAE,QAAA,OAAO,EAAE,CAAC,WAAW,EAAE;AACtC,IAAA,IAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;QAAE,OAAO,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;AAC9D,IAAA,OAAO,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,GAAG,GAAG;AACjE;AA4BA,MAAM,YAAY,GAAuB,MAAM,CAAC,MAAM,CAAC,EAAC,SAAS,EAAC,IAAI,EAAC,CAAC;AAE5DA;AAAZ,CAAA,UAAY,YAAY,EAAA;AAEpB,IAAA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;AAEjB,IAAA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;AACrB,CAAC,EALWA,oBAAY,KAAZA,oBAAY,GAKvB,EAAA,CAAA,CAAA;AAaD,SAAS,SAAS,CAA+B,CAAI,EAAA;IACjD,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAA4B;AACpF;AAUA,CAAA,UAAiB,GAAG,EAAA;IAChB,SAAgB,GAAG,CAAiC,MAAqB,EAAA;AACrE,QAAA,IAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AACtB,YAAA,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;YAC7D,IAAG,CAAC,cAAc,CAAC,MAAM;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;YAC/D,OAAO,IAAI,CACP;iBACK,GAAG,CAAC,CAAC,IAAI,CAAG,EAAA,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAA,EAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAU,CAAC,CAAA,CAAE;AAClE,iBAAA,IAAI,CAAC,IAAI,CAAC,CAClB;;AAEL,QAAA,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC;QACxC,IAAG,CAAC,cAAc,CAAC,MAAM;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;QAC/D,OAAO,IAAI,CACP;AACK,aAAA,GAAG,CAAC,SAAS,IAAI,CAAA,EAAG,cAAc,CAAC,SAAS,CAAC,CAAI,CAAA,EAAA,YAAY,CAAE,MAAoB,CAAC,SAAS,CAAC,CAAC,EAAE;AACjG,aAAA,IAAI,CAAC,IAAI,CAAC,CAClB;;AAhBW,IAAA,GAAA,CAAA,GAAG,MAiBlB;AACD,IAAA,SAAgB,MAAM,CAAiC,KAAc,EAAE,IAAmB,EAAE,UAAuB,YAAY,EAAA;AAC3H,QAAA,IAAI,CAAC,GAAG,GAAG,CAAA,UAAU,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,SAAS,GAAG,EAAE,CAAC,CAAA,KAAA,EAAQ,kBAAkB,CAAC,KAAK,CAAC,CAAA,KAAA,EAAQ,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAElH,IAAI,OAAO,CAAC,cAAc,KAAKA,oBAAY,CAAC,MAAM,EAAE;AAChD,YAAA,IAAI,QAAY;AAChB,YAAA,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACrB,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;iBAClB;gBACH,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;YAEnC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC,GAAG,GAAG,CAAA,CAAG,EAAA,CAAC,4BAA4B,MAAM,CAAA,CAAA,EAAI,MAAM,CAAA,CAAE;;aACtD,IAAG,OAAO,CAAC,cAAc,KAAKA,oBAAY,CAAC,MAAM,EAAE;AACtD,YAAA,IAAI,IAAU;AACd,YAAA,IAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACpB,gBAAA,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAa,CAAC;;iBACnC;AACH,gBAAA,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;;AAE1B,YAAA,CAAC,GAAG,GAAG,CAAA,CAAA,EAAG,CAAC,CAAA,yBAAA,EAA4B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAG;gBAClD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACxC,gBAAA,OAAO,GAAG,CAAA,CAAA,EAAG,MAAM,CAAW,QAAA,EAAA,MAAM,GAAG;aAC1C,CAAC,EAAE;;AAER,QAAA,OAAO,CAAC;;AAxBI,IAAA,GAAA,CAAA,MAAM,SAyBrB;IAID,SAAgB,KAAK,CAAC,MAAsE,EAAA;AACxF,QAAA,IAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AACtB,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAG,EAAA,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,IAAA,EAAO,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEnG,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAAA,EAAG,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAO,IAAA,EAAA,eAAe,CAAC,KAAK,CAAC,CAAE,CAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAJ5G,IAAA,GAAA,CAAA,KAAK,QAKpB;IACD,SAAgB,GAAG,CAAC,SAA2B,EAAA;QAC3C,IAAI,MAAM,CAAC,SAAS,CAAC;AAAE,YAAA,OAAO,SAAS;AACvC,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC;;AAFV,IAAA,GAAA,CAAA,GAAG,MAGlB;AAmBD,IAAA,SAAgB,KAAK,CAAC,CAAS,EAAE,CAAS,EAAA;QACtC,OAAO,GAAG,CAAA,CAAiB,cAAA,EAAA,CAAA,MAAA,EAAS,CAAC,CAAI,CAAA,EAAA,CAAC,CAAG,CAAA,CAAA,CAAA,CAAA,CAAG;;AADpC,IAAA,GAAA,CAAA,KAAK,QAEpB;IAgBD,SAAgB,EAAE,CAAC,EAAM,EAAA;AACrB,QAAA,OAAO,kBAAkB,CAAC,EAAE,CAAC;;AADjB,IAAA,GAAA,CAAA,EAAE,KAEjB;IAED,SAAgB,EAAE,CAAC,EAAmB,EAAA;AAClC,QAAA,OAAO,kBAAkB,CAAC,EAAE,CAAC;;AADjB,IAAA,GAAA,CAAA,EAAE,KAEjB;IAED,SAAgB,GAAG,CAAC,EAAgB,EAAA;AAChC,QAAA,OAAO,kBAAkB,CAAC,EAAE,CAAC;;AADjB,IAAA,GAAA,CAAA,GAAG,MAElB;IAED,SAAgB,GAAG,CAAC,EAAiB,EAAA;AACjC,QAAA,OAAO,kBAAkB,CAAC,EAAE,CAAC;;AADjB,IAAA,GAAA,CAAA,GAAG,MAElB;IACD,SAAgB,IAAI,CAAC,GAAG,OAAwB,EAAA;AAE5C,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAFxC,IAAA,GAAA,CAAA,IAAI,OAGnB;IAED,SAAgB,OAAO,CAAC,OAAwB,EAAA;AAC5C,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AADxC,IAAA,GAAA,CAAA,OAAO,UAEtB;IACD,SAAgB,MAAM,CAAC,MAAiB,EAAA;AACpC,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAI,CAAA,EAAA,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAA,CAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AADtE,IAAA,GAAA,CAAA,MAAM,SAErB;AACL,CAAC,EAxHgB,GAAG,KAAH,GAAG,GAwHnB,EAAA,CAAA,CAAA;;AC7Te,SAAA,GAAG,CAAO,CAAM,EAAE,CAAM,EAAA;AACpC,IAAA,IAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM;AAAE,QAAA,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC;IAC9E,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC;AAQM,SAAU,WAAW,CAAC,KAAiB,EAAA;AACzC,IAAA,IAAG,KAAK,YAAY,OAAO,EAAE;AACzB,QAAA,OAAO,EAAC,GAAG,EAAE,KAAK,EAAC;;AAChB,SAAA,IAAG,OAAO,KAAK,KAAK,QAAQ,EAAE;AACjC,QAAA,OAAO,KAAK;;IAEhB,MAAM,IAAI,KAAK,CAAC,CAAA,kDAAA,EAAqD,OAAO,KAAK,CAAA,CAAE,CAAC;AACxF;;MChBa,cAAc,CAAA;AAEM,IAAA,IAAA;AAA7B,IAAA,WAAA,CAA6B,IAA4B,EAAA;QAA5B,IAAI,CAAA,IAAA,GAAJ,IAAI;;AAGjC,IAAA,KAAK,CAA0C,KAAiB,EAAA;AAC5D,QAAA,MAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC;AAC/B,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AACnB,YAAA,GAAG,IAAI;AACP,YAAA,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE;AAC9B,SAAA,CAAC;;IAGN,IAAI,GAAoG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAQ;IAEpI,MAAM,GAAG,CAAyD,KAAiB,EAAA;AAC/E,QAAA,MAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC;AAC/B,QAAA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAU;AACnC,YAAA,GAAG,IAAI;YACP,GAAG,EAAE,GAAG,CAAA,CAAA;AACS,2BAAA,EAAA,IAAI,CAAC,GAAG,CAAA;AACR,4BAAA;AACpB,SAAA,CAAC;AACF,QAAA,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;;IAGvC,MAAM,GAAG,CAAyB,KAAc,EAAA;AAC5C,QAAA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAQ;AACjC,YAAA,GAAG,EAAE,KAAK;AACV,YAAA,WAAW,EAAE,IAAI;AACpB,SAAA,CAAC;QACF,IAAG,CAAC,IAAI,CAAC,MAAM;AAAE,YAAA,OAAO,EAAE;AAC1B,QAAA,IAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,uCAAA,EAA0C,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAA,CAAC;AACpG,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAG9B,MAAM,KAAK,CAAyB,KAAc,EAAA;AAC9C,QAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAW;AACjC,YAAA,GAAG,EAAE,KAAK;AACV,YAAA,WAAW,EAAE,IAAI;AACpB,SAAA,CAAC;AACF,QAAA,IAAG,CAAC,GAAG;AAAE,YAAA,OAAO,IAAI;AACpB,QAAA,IAAG,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,CAAA,uCAAA,EAA0C,GAAG,CAAC,MAAM,CAAE,CAAA,CAAC;AAC5F,QAAA,OAAO,GAAG,CAAC,CAAC,CAAC;;IAGjB,MAAM,MAAM,CAAC,KAAc,EAAA;AACvB,QAAA,OAAO,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,CAAQ,GAAG,CAAA,CAAiB,cAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAC,CAAC;;IAGzE,MAAM,KAAK,CAAC,KAAc,EAAA;AACtB,QAAA,OAAO,MAAM,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA,CAAyB,sBAAA,EAAA,KAAK,CAAU,QAAA,CAAA,CAAC,CAAC;;AAGhF,IAAA,OAAO,MAAM,CAAyD,KAAc,EAAA;QAChF,IAAI,OAAO,GAAc,EAAE;AAC3B,QAAA,IAAI,OAAmB;AACvB,QAAA,IAAI,OAAO,GAAG,IAAI,OAAO,CAAO,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC;QACjD,IAAI,IAAI,GAAG,KAAK;QAEhB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE;AACpC,aAAA,EAAE,CAAC,OAAO,EAAE,GAAG,IAAG;AACf,YAAA,MAAM,GAAG;AACb,SAAC;AACA,aAAA,EAAE,CAAC,MAAM,EAAE,GAAG,IAAG;AACd,YAAA,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AACjB,YAAA,OAAO,EAAE;AACb,SAAC;AACA,aAAA,EAAE,CAAC,KAAK,EAAE,MAAK;YACZ,IAAI,GAAG,IAAI;AACX,YAAA,OAAO,EAAE;AACb,SAAC,CAAC;AAEN,QAAA,SAAS;AACL,YAAA,MAAM,OAAO;YACb,OAAO,OAAO;AACd,YAAA,IAAG,IAAI;gBAAE;AACT,YAAA,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC;YACvC,OAAO,GAAG,EAAE;;QAEhB;;IAGJ,OAAO,GAAA;AACH,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;IAG9B,gBAAgB,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;;IAGvC,MAAM,GAAA;AACF,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;;IAG7B,QAAQ,GAAA;AACJ,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;;IAG/B,IAAI,GAAA;AACA,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;;IAG3B,UAAU,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;;IAGjC,KAAK,GAAA;AACD,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;;IAG1B,OAAO,GAAA;AACH,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;AAG9B,IAAA,IAAI,aAAa,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;;AAGpC,IAAA,IAAI,OAAO,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;AAEjC;;MC1HY,cAAc,CAAA;AAEM,IAAA,IAAA;AAA7B,IAAA,WAAA,CAA6B,IAAkB,EAAA;QAAlB,IAAI,CAAA,IAAA,GAAJ,IAAI;;AAGjC,IAAA,MAAM,aAAa,GAAA;QACf,OAAO,IAAI,cAAc,CAAgB,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;;AAGrE,IAAA,IAAI,CAAkD,MAAS,EAAA;AACnE,QAAA,QAAQ,OAAO,GAAG,IAAW,KAAI;AAC7B,YAAA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE;AACvC,YAAA,IAAI;gBACA,OAAO,MAAO,IAAI,CAAC,MAAM,CAAS,CAAC,GAAG,IAAI,CAAC;;oBACrC;gBACN,IAAI,CAAC,OAAO,EAAE;;AAEtB,SAAC;;AAGL,IAAA,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1B,IAAA,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AACxB,IAAA,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AACtB,IAAA,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AACtB,IAAA,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1B,IAAA,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC5B,IAAA,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAE1B,IAAA,OAAO,MAAM,CAAyD,KAAc,EAAA;AAChF,QAAA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE;AACvC,QAAA,IAAI;YACA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;;gBACnB;YACN,IAAI,CAAC,OAAO,EAAE;;QAElB;;IAIJ,KAAK,GAAA;AACD,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;;IAK1B,MAAM,WAAW,CAAU,QAAa,EAAA;AACpC,QAAA,IAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC,WAAW,CAAM,OAAM,IAAI,KAAG;gBACtC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9E,gBAAA,IAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,EAAE;AAC3C,oBAAA,MAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM;AACjD,wBAAA,KAAK,EAAE,CAAC;AACR,wBAAA,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AACX,wBAAA,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;AACf,qBAAA,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,UAAU,CAAC;oBAC/C,MAAM,KAAK,CAAC,CAAA,EAAG,MAAM,CAAC,MAAM,CAAQ,KAAA,EAAA,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,CAAA,QAAA,EAAW,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAA,GAAA,EAAM,GAAG,CAAC,KAAK,CAAA,EAAA,EAAK,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAQ,IAAA,EAAA,GAAG,CAAC,MAAc,CAAC,MAAM,CAAA,CAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAE,CAAA,CAAC;;AAEjM,gBAAA,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAK,CAAS,CAAC,KAAK,CAAC;AAC7C,aAAC,CAAC;;AAGN,QAAA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE;AACvC,QAAA,IAAI;AACA,YAAA,MAAM,IAAI,CAAC,gBAAgB,EAAE;AAC7B,YAAA,IAAI,MAAe;AACnB,YAAA,IAAI;AACA,gBAAA,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC;;YAC/B,OAAM,GAAG,EAAE;AACT,gBAAA,MAAM,IAAI,CAAC,QAAQ,EAAE;AACrB,gBAAA,MAAM,GAAG;;AAEb,YAAA,MAAM,IAAI,CAAC,MAAM,EAAE;AACnB,YAAA,OAAO,MAAM;;gBACP;AACN,YAAA,MAAM,IAAI,CAAC,OAAO,EAAE;;;AAK5B,IAAA,IAAI,iBAAiB,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;;AAGxC,IAAA,IAAI,gBAAgB,GAAA;AAChB,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;;AAGvC,IAAA,IAAI,eAAe,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;;AAGtC,IAAA,IAAI,aAAa,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;;AAEvC;AAEK,SAAU,UAAU,CAAuB,MAA0B,EAAA;AACvE,IAAA,OAAO,IAAI,cAAc,CAAI,OAAO,CAAC,UAAU,CAAC;AAE5C,QAAA,WAAW,EAAE,IAAI;AACjB,QAAA,GAAG,MAAM;AACZ,KAAA,CAAC,CAAC;AACP;;;;;;;;;"}