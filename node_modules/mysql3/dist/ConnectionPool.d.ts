import type { DefaultValueType, QueryResult } from './util';
import mariadb from 'mariadb';
import type { SqlFrag } from './sql';
import { PoolConnection } from './PoolConnection';
export declare class ConnectionPool<TDefaultValue = DefaultValueType> {
    private readonly pool;
    constructor(pool: mariadb.Pool);
    getConnection(): Promise<PoolConnection<TDefaultValue>>;
    private _fwd;
    query: <TRecord = Record<string, any>>(query: import("./util").QueryParam) => Promise<QueryResult<TRecord>>;
    exec: (query: import("./util").QueryParam) => Promise<mariadb.UpsertResult>;
    row: <TRecord extends object = Record<string, any>>(query: import("./util").QueryParam) => Promise<TRecord | null>;
    col: <TValue = any>(query: SqlFrag) => Promise<TValue[]>;
    value: <TValue = any>(query: SqlFrag) => Promise<TValue | null>;
    exists: (query: SqlFrag) => Promise<boolean>;
    count: (query: SqlFrag) => Promise<number>;
    stream<TRecord extends object = Record<string, TDefaultValue>>(query: SqlFrag): AsyncGenerator<TRecord, unknown, undefined>;
    close(): Promise<void>;
    transaction<TReturn>(callback: (conn: PoolConnection<TDefaultValue>) => Promise<TReturn>): Promise<TReturn>;
    transaction<TUnionResults = Record<string, TDefaultValue>>(sqlFrags: SqlFrag[]): Promise<QueryResult<TUnionResults>[]>;
    get activeConnections(): number;
    get totalConnections(): number;
    get idleConnections(): number;
    get taskQueueSize(): number;
}
export declare function createPool<T = DefaultValueType>(config: mariadb.PoolConfig): ConnectionPool<T>;
