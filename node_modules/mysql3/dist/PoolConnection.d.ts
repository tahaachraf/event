import type { DefaultValueType, QueryParam, QueryResult } from './util';
import type mariadb from 'mariadb';
import type { SqlFrag } from './sql';
export declare class PoolConnection<TDefaultValue = DefaultValueType> {
    private readonly conn;
    constructor(conn: mariadb.PoolConnection);
    query<TRecord = Record<string, TDefaultValue>>(query: QueryParam): Promise<QueryResult<TRecord>>;
    exec: ((...args: Parameters<typeof PoolConnection.prototype.query>) => Promise<mariadb.UpsertResult>);
    row<TRecord extends object = Record<string, TDefaultValue>>(query: QueryParam): Promise<TRecord | null>;
    col<TValue = TDefaultValue>(query: SqlFrag): Promise<TValue[]>;
    value<TValue = TDefaultValue>(query: SqlFrag): Promise<TValue | null>;
    exists(query: SqlFrag): Promise<boolean>;
    count(query: SqlFrag): Promise<number>;
    stream<TRecord extends object = Record<string, TDefaultValue>>(query: SqlFrag): AsyncGenerator<TRecord, unknown, undefined>;
    release(): Promise<void>;
    beginTransaction(): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    ping(): Promise<void>;
    changeUser(): Promise<void>;
    close(): Promise<void>;
    destroy(): void;
    get serverVersion(): string;
    get isValid(): boolean;
}
